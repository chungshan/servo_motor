#include "ros/ros.h"

#include "std_msgs/UInt16.h"



#include <sstream>





int main(int argc, char **argv)

{

 

  ros::init(argc, argv, "talker");



 

  ros::NodeHandle n;



  

  ros::Publisher servo_pub = n.advertise<std_msgs::UInt16>("servo", 1000);
	 std_msgs::UInt16 msg;
    
    	msg.data = 50.0;



  ros::Rate loop_rate(10);



 

  int count = 0;

  while (ros::ok())

  {
	int c = getch();
        	if (c != EOF) {
            		switch (c) {
            		case 65:    // key up
                	msg.data  += 1;
                	break;
            		case 66:    // key down
                	msg.data -= 1;
                	break;

                        }
}


    

    std_msgs::UInt16 msg;
    
    msg.data = 50.0;


    



    //ROS_INFO("%f", msg);



    

    servo_pub.publish(msg);



    ros::spinOnce();



    loop_rate.sleep();

    ++count;

  }




  return 0;
}
  
  char getch()
{
    int flags = fcntl(0, F_GETFL, 0);
    fcntl(0, F_SETFL, flags | O_NONBLOCK);

    char buf = 0;
    struct termios old = {0};
    if (tcgetattr(0, &old) < 0) {
        perror("tcsetattr()");
    }
    old.c_lflag &= ~ICANON;
    old.c_lflag &= ~ECHO;
    old.c_cc[VMIN] = 1;
    old.c_cc[VTIME] = 0;
    if (tcsetattr(0, TCSANOW, &old) < 0) {
        perror("tcsetattr ICANON");
    }
    if (read(0, &buf, 1) < 0) {
        //perror ("read()");
    }
    old.c_lflag |= ICANON;
    old.c_lflag |= ECHO;
    if (tcsetattr(0, TCSADRAIN, &old) < 0) {
        perror ("tcsetattr ~ICANON");
    }
    return (buf);
}

int c = getch();
        if (c != EOF) {
            switch (c) {
            case 65:    // key up
                msg  += 1;
                break;
            case 66:    // key down
                msg -= 1;
                break;
          
                        }
}
